// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Echo {
  id                String      @id @default(uuid())
  name              String
  notes             String      @default("")
  tags              String      @default("")
  // size gets filled out by echo so we won't have it right away
  size              BigInt      @default(0)
  downloads         Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
  initialUploaderId String
  lastUploaderId    String
  uploading         Boolean     @default(true)
  images            EchoImage[]
}

model EchoImage {
  id        String   @id @default(uuid())
  echoId    String
  echo      Echo     @relation(fields: [echoId], references: [id])
  imageId   String
  creatorId String
  image     Image    @relation(fields: [imageId], references: [id])
  createdAt DateTime @default(now())

  @@index([echoId])
}

model User {
  id               String             @id @default(uuid())
  oauthId          String             @unique
  displayName      String
  profileImage     String
  bookerAssignment BookerAssignment[]
  createdAt        DateTime           @default(now())
  lastActiveAt     DateTime           @default(now())
  rsvps            Rsvp[]
  events           Event[]
  rsvpDays         RsvpDay[]
  notifications    Notification[]
}

model Image {
  id                String           @id @default(uuid())
  generationVersion Int
  original          Bytes
  large             Bytes
  medium            Bytes
  small             Bytes
  source            String
  CandidateImage    CandidateImage[]
  createdAt         DateTime         @default(now())
  EchoImage         EchoImage[]
}

model Race {
  id              String           @id @default(uuid())
  name            String
  candidates      Candidate[]
  candidateImages CandidateImage[]
  votes           Vote[]
  creatorId       String
  createdAt       DateTime         @default(now())
}

model Candidate {
  id        String           @id @default(uuid())
  name      String
  notes     String           @default("")
  votes     Vote[]
  creatorId String
  raceId    String
  images    CandidateImage[]
  race      Race             @relation(fields: [raceId], references: [id])
  createdAt DateTime         @default(now())

  @@unique([raceId, name])
  @@index([raceId])
}

model CandidateImage {
  id          String    @id @default(uuid())
  raceId      String
  candidateId String
  imageId     String
  creatorId   String
  race        Race      @relation(fields: [raceId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  image       Image     @relation(fields: [imageId], references: [id])
  createdAt   DateTime  @default(now())

  @@index([raceId])
  @@index([candidateId])
}

model Vote {
  raceId      String
  candidateId String
  race        Race      @relation(fields: [raceId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  userId      String
  direction   String

  @@unique([candidateId, userId])
  @@index([raceId])
  @@index([candidateId])
}

model BookerRole {
  id               String             @id @default(uuid())
  name             String
  concern          String
  permissions      Json
  BookerAssignment BookerAssignment[]
  createdAt        DateTime           @default(now())
}

model BookerAssignment {
  id        String     @id @default(uuid())
  concern   String
  userId    String
  roleId    String
  role      BookerRole @relation(fields: [roleId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())

  @@unique([concern, userId])
}

model Event {
  id             String    @id @default(uuid())
  name           String
  notes          String    @default("")
  attendanceType String
  startDate      DateTime
  endDate        DateTime
  creatorId      String
  creator        User      @relation(fields: [creatorId], references: [id])
  createdAt      DateTime  @default(now())
  rsvps          Rsvp[]
  rsvpDays       RsvpDay[]
}

model Rsvp {
  id       String    @id @default(uuid())
  status   String
  notes    String    @default("")
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  eventId  String
  event    Event     @relation(fields: [eventId], references: [id])
  rsvpDays RsvpDay[]

  @@unique([eventId, userId])
}

model RsvpDay {
  id               String  @id @default(uuid())
  date             String
  stayingOvernight Boolean
  userId           String
  user             User    @relation(fields: [userId], references: [id])
  rsvpId           String
  rsvp             Rsvp    @relation(fields: [rsvpId], references: [id])
  eventId          String
  event            Event   @relation(fields: [eventId], references: [id])

  @@unique([eventId, userId, date])
  @@index([eventId, date])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  read      Boolean  @default(false)
  title     String
  message   String
  href      String
  createdAt DateTime @default(now())

  @@index([userId, read])
}
